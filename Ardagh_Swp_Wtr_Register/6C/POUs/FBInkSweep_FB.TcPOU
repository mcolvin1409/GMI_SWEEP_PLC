<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="FBInkSweep_FB" Id="{36c6e48c-e6ad-492d-82f6-a1907a3fd811}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FBInkSweep_FB
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
///SDOC/////////////////////////////////////////////////////////////////////////
//
//  FBInkSweep_FB.TcPOU      - Function Block - Ink positioner control with pot feedback - AVT PLC 
//						Version 2
//  Author:         Mark Colvin                        Date: Feb 7, 2018
//
//	Beckhoff TC3 Structured Text for CX50x0 PLC
//
//	includes features:
//		10 inker enables
//		Ink ramping
//		Water ramping
//		Ink Surge
//		Water Flood
//		Ink Ducting (Hold Off)
//		Ink Wash Up 
//		Ink Function Control (Off/manual/auto)
//		water Function Control (off/manual/auto)
//		Inker positioner with feedback
//		Water positioner with feedback
//		Inker Analog Control
//		water Analog Control
//		Inker Positioner output cancel
//		Water Positioner output cancel
///////////////////////////////////////////////////////////////////////SDOCEND//
	// === LOCAL DATA === NOT saved over power cycles
	
	//FB_PlusMinusWithFB_arr	:FB_PlusMinusWithFB;  //debug the PlusMinusWithFB FB, only single ftn with one set of locals
	FB_PlusMinusWithFB_arr	:ARRAY[0..GVL.w_MAXFOUNTAINS] OF FB_PlusMinusWithFB;  //normal operations, each fountain has own local variables
	nScreenValceu				:WORD;								//???
	Index					:WORD;								// temp word for loop fountain index
	Index_offset			:WORD;								//index offset to runtime data for fountains 7 to 10; 0 or 220
	w_itrgt					:WORD;								// temp index for target sweep % in MB array
	w_icmpr					:WORD;								//temp index for on-press sweep % in MB array
	w_Actual					:WORD;						//temp A2D FB value
	w_target				:ARRAY [0..GVL.W_MAXFOUNTAINS] OF WORD;				//temp for the trim target (source is manual trim or ramping adjusted trim)
	bError					:ARRAY [0..GVL.W_MAXFOUNTAINS] OF BOOL;	//error recorded from PlusMinuswithFB FB
	wError					:WORD;							//temp error code to process later
	bRESET					:ARRAY [0..GVL.W_MAXFOUNTAINS] OF BOOL;	//request to PlusMinusWithFB FB to reset any error seen previously
	w_halfpercent				:ARRAY [0..GVL.W_MAXFOUNTAINS] OF WORD;	// 1 percent ticks halved
	w_target_ticks			:ARRAY [0..GVL.W_MAXFOUNTAINS] OF WORD;	// current target ticks
	
	iEn: INT;					// parm to PlusMinusWithFB - enable of fountain used in FB, this should be a BOOL
	iActual: INT;					// parm to PlusMinusWithFB - actual A2D value from FB circuit for this fountain - 1 to 32768
	iScaleActualUnits: WORD;		// parm to PlusMinusWithFB - max value of units of the requested target (% ink sweep) - usually 99%
	iRequested: INT;
	iRESET: INT;
	iNrOfStuckCycles: INT;
	iScaleActualMinVal: INT;
	iScaleActualMaxVal: INT;
	iSETUP_jerkIfClose: INT;
	qInc: INT;
	qDec: INT;
	qWarningStuck: INT;
	qErrorCode: INT;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
(************************************************************************************************
 *
 *   FUNCTION BLOCK	:FBInkSweep_FB
 *
 *   Author		:	Mark Colvin			Date Feb 7, 2018
 *
 *   Description:	Perform inker positioner control of Ink Sweep.  Adjust user controlled ink trim value while in manual mode 
 *
 *   Parameters	:	Global Variables for configuration parameters
 *						Coils[GVL.ENABLEFULLINIT] 		-	flags PLC initialization in progress
 *						Coils[GVL.ENABLEFOUNTAIN		- flags for each fountain configured and enabled
 *						Coils[GVL.CancelInkerPositioner	- flags for canceling any fountain positioner changes in progress
 *						Coils[GVL.InkSweepRUN			- flags for seeking the target trim for sweep positioner
 *						Coils[GVL.Inker_RUNNING			- flags for indicating the sweep positioner is currently changing 
 *						Coils[GVL.PLCerrorLastRequestInk - flags for indicating the sweep positioner failed to position to target percentage
 *						Registers[w_itrgt]				- desired target trim percentage for the sweep positioner.
 *						Registers[w_icmpr]				- current trim percentage for the sweep positioner for the current PLC cycle
 *						w_LastSweepTrim					- last target trim percentage for the sweep positioner requested.
 *						GVL_IO.InkInput					- live AtoD sampling of the positioner feedback			
 *
 *	low level positioner data:
 *				POSTIONER_TIMEOUT = number of PLC scan cycles until FB gives warning at 1ms PLC cycle time; 4000 = 4s (no change in AtoD FB data for positioner)
 *				GVL.w_InkInputIntMin = min A2D value from FB circuit, regarded as ZERO % sweep
 *				GVL.w_InkInputIntMax = maximum A2D value from pot circuit, regarded as MAX % sweep
 *
 *	Internal:	w_itrgt := GVL.SWEEPTRIM = index to MODBUS Output_Registers - current ftn sweep trim TARGET (percent location of positioner actuator, with pot feedback)
 *				w_icmpr := GVL.SWEEPTRIMONPRESS = index to MODBUS Output_Registers - current ftn sweep trim ON-PRESS (current from pot feedback) 
 *   Returns	:		changes to Global Variables and Global IO controls
 *
 *	WARNING ! - known issue of  trim target of ZERO as the first move after a PLC RESET is NOT resolved! -it will not start moving - as of Sept 2019 mac
 *
 *   History	:   29-Oct-17, GaryS Created
 *				12-Dec-17	Mark C Removed the magic number with macros WI 143322
 *				18-Jan-18	Mark C added logging of various program states to VS IDE output/error window
 *				7-Feb-18 	Mark C new Function Block based on DCOS sample of the 
 *									same type of control called PlusMinusWithPotFB
 *
***************************************************************************************************)

FB_PlusMinusWithFB_arr[1].iRequested	:= nScreenValceu;  //not sure what this is doing here

IF (GVL.mb_Output_Coils[GVL.ENABLEFULLINIT] = FALSE) THEN		//do not process while initializing PLC

	FOR Index := 0 TO (GVL.w_MAXFOUNTAINS) DO		//normal operations - loop ALL the configured fountains
	 //Index := 0;  //debug a single fountain, one at a time, 0 to max-1
		Index_offset := 0;		//ftns 1 to 6, WORDRUNTIME only
		IF( Index > 5 )THEN
			Index_offset := GVL.SWPWTR_7_10_FTN_OFFSET;	//ftns 7 to 10, WORDRUNTIME only
		END_IF	
		bError[Index] := FALSE;				//clear local error flag for current fountain
		w_itrgt := GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE);			//index to MODBUS Output_Registers - current ftn sweep trim target
		w_icmpr := GVL.SWEEPTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE);	//index to MODBUS Output_Registers - current ftn sweep on-press data
		IF ((GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.AUTO_FUNCTION) AND 
																			(GVL.mb_Output_Coils[GVL.INKRAMPINGENABLED])) THEN
			w_target[Index] := GVL.w_InkRampTrimAdjusted[Index];  //trim is from AUTO
		ELSE
			w_target[Index] := GVL.mb_Output_Registers[w_itrgt];  //trim is from MANUAL
		END_IF
		IF( GVL.mb_Output_Coils[GVL.ENABLEFOUNTAIN + Index] ) THEN				// check if fountain enabled,
			//IF( GVL.mb_Output_Coils[GVL.InkSweep_OFF +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE ) THEN		//test if this inker sweep is NOT disabled with function OFF 
				IF( GVL.mb_Output_Coils[GVL.CancelInkerPositioner +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE ) THEN		//test disable inker positioner mtr outputs from slave
					//test current ink trim % request with last % request, move positioner if not same - keeps motors from moving during reset condition - RUN boolean forces another attempt
					IF(( w_target[Index] <> GVL.w_LastSweepTrim[Index]) OR GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)]) THEN
						IF( GVL_IO.InkInput[Index] > 0 ) THEN							// is FB circuit value valid, process normally
							//test current ink trim target % with current on-press % value, move positioner if not same - keeps the motors moving toward target
							IF(( w_target[Index] <> GVL.mb_Output_Registers[w_icmpr]) OR //on-press <> target or RUNNING flag is true
								GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE ) THEN
								IF (GVL.mb_Output_Coils[GVL.PLCerrorLastRequestInk+(Index * GVL.BOOLRUNTIMEGROUPSIZE)]) THEN
									bRESET[Index] := TRUE;								// set bool to clear error condition in PlusMinus FB
								END_IF
						
								FB_PlusMinusWithFB_arr[Index](    //normal operations
								//FB_PlusMinusWithFB_arr(			//debug the PlusMinusWithFB FB with one index
									iEn					:= GVL.mb_Output_Coils[GVL.ENABLEFOUNTAIN + Index] , 	// need to be TRUE for activating any output of inker positioner
									iActual				:= INT_TO_WORD(GVL_IO.InkInput[Index]), 				// actual potentiometer value from FB circuit, 0 means missing, 1 to 32768 normal
									iRequested			:= w_target[Index], 							// Requested target value of inker positioner, in % sweep
									iRESET				:= bRESET[Index], 								// reset any fault seen previously
									iNrOfStuckCycles	:= GVL.POSTIONER_TIMEOUT, 						// number of PLC scan cycles until FB gives warning at 1ms PLC cycle time; 4000 = 4s
									iScaleActualMinVal	:= GVL.w_InkInputIntMin[Index], 				// min A2D value from FB circuit, regarded as ZERO % sweep
									iScaleActualMaxVal	:= GVL.w_InkInputIntMax[Index],					// maximum A2D value from pot circuit, regarded as MAX % sweep
									iScaleActualUnits	:= GVL.mb_Output_Registers[GVL.MAXSWEEPTRIM], 	// units of requested target(max target value requested)
									iSETUP_jerkIfClose	:= GVL.PULSE_WHEN_CLOSE_OPTION,  				// flag to tweak motor output to reach target value if close (if motors are fast)
									qInc				=> GVL_IO.InkMotorFwd[Index], 		// motor output BOOL for forward direction of inker positioner motor (positive)
									qDec				=> GVL_IO.InkMotorRvs[Index], 		//motor output BOOL for reverse direction of inker positioner motor	(negative)
									qWarningStuck		=> bError[Index],					// error flag for motor/FB stuck error
									qErrorCode			=> wError);								//Error code if error flag
								IF(bError[Index] = TRUE) THEN
									wError :=	(wError * 100) + Index+1;					//add the fountain index to the error code to log to AS
								ELSE
									GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;		//flag ink trim motor moving
								END_IF
								w_Actual := INT_TO_WORD(GVL_IO.InkInput[Index]);							//actual analog FeedBack value is captured here
								IF(	INT_TO_WORD(GVL_IO.InkInput[Index]) < GVL.w_InkInputIntMin[Index]) THEN	//if lower than minimum, don't go lower.
									GVL_IO.InkMotorRvs[Index] := FALSE;							//turn off that direction
									w_Actual := GVL.w_InkInputIntMin[Index];					//fudge actual value to be min limit
								END_IF		
							
								IF(	INT_TO_WORD(GVL_IO.InkInput[Index]) > GVL.w_InkInputIntMax[Index]) THEN	//if greater than maximum, don't go higher.
									GVL_IO.InkMotorFwd[Index] := FALSE;						//turn off that direction
									w_Actual := GVL.w_InkInputIntMax[Index];					//fudge actual value to be max limit
								END_IF		
					
								// last % sweep trgt        curr analog     min analog allowed            max sweep %			//calc current % trim value from curr analog value
								GVL.w_LastSweepTrim[Index] := (w_Actual - GVL.w_InkInputIntMin[Index]) * (GVL.mb_Output_Registers[GVL.MAXSWEEPTRIM]+1) / 
																	(GVL.w_InkInputIntMax[Index] - GVL.w_InkInputIntMin[Index]);	
																	// max analog allowed - min analog allowed
//								w_halfpercent[Index] := REAL_TO_WORD(GVL.r_InkInput1PercentInt[Index] /2.0);   //number of A2D ticks for 0.5% for manual
								w_halfpercent[Index] := REAL_TO_WORD(GVL.r_InkInput1PercentInt[Index] );   //number of A2D ticks for 1% for manual - Ardagh 7/5/18 HV
								IF ((GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.AUTO_FUNCTION)) THEN  // Ink  function set to auto
									w_halfpercent[Index] := REAL_TO_WORD(GVL.r_InkInput1PercentInt[Index] * 2.0);   //number of A2D ticks for 2% for AUTO
								END_IF
								w_target_ticks[Index] := REAL_TO_WORD(GVL.r_InkInput1PercentInt[Index]) * GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)]; 
				//				IF(	(GVL.w_LastSweepTrim[Index] = w_target[Index]) ) OR //fudge the last trim setting ticks to +/- 0.5%
				//					( (w_Actual < (w_target_ticks[Index]+w_halfpercent[Index]) ) AND	// of the requested target or calc'd sweep value is EQUAL
				//					(w_Actual > (w_target_ticks[Index]-w_halfpercent[Index]) ) ) THEN
				//						GVL.w_LastSweepTrim[Index] := w_target[Index];					// last trim is now requested target trim
				//				END_IF
								
								GVL.mb_Output_Registers[w_icmpr]:= GVL.w_LastSweepTrim[Index];  	// update ON-PRESS trim % to current inker location
								GVL.mb_Output_Coils[GVL.PLCerrorLastRequestInk+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;	// reset bool to show AS no longer in error condition
							ELSE							//no move needed if trgt and on-press are same
								GVL_IO.InkMotorFwd[Index] := FALSE;										//reset BOTH direction outputs, no move, no error 
								GVL_IO.InkMotorRvs[Index] := FALSE;
								GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE; 
								bError[Index] 			:= FALSE;
								wError 					:= 0;
							END_IF										// test the curr trgt% with curr on-press% value
						ELSE
							bError[Index] := 	TRUE;							//if enabled and zero feedback signal, this is an error.
							wError :=	(GVL.MISSINGFBSIGNAL * 100) + Index+1;
						END_IF										
					ELSE					// curr trgt% is same as last request%; no move required, no error
						GVL_IO.InkMotorFwd[Index] := FALSE;										//reset BOTH direction outputs, no move, no error 
						GVL_IO.InkMotorRvs[Index] := FALSE;
						GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE; 
						bError[Index] 			:= FALSE;
						wError 					:= 0;
					END_IF
				ELSE						//cancel output is TRUE, stop the motor outputs now and read current on-press value, set oper request error
					bError[Index] := 	TRUE;							//oper requested cancel, this is an error. And now switch to MANUAL function, if in AUTO
					wError :=		(GVL.INKPOSITCANCEL * 100) + Index+1;
					GVL_IO.InkMotorFwd[Index] := FALSE;							//reset BOTH direction outputs, no move if error
					GVL_IO.InkMotorRvs[Index] := FALSE;
//					IF GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.MANUAL_FUNCTION THEN //if manual now, reset bool
					GVL.mb_Output_Coils[GVL.CancelInkerPositioner +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;	//reset the output cancel bit here
					GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;		//reset the OFF boolean.
//					END_IF
//					IF GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.AUTO_FUNCTION THEN
					GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION; //force into MANUAL function					
//					END_IF
				END_IF
				IF(bError[Index] ) THEN								//if error code from PlusMinusWithPot FB or FB signal missing or Cancel Output from slave
					FProcessError(ErrorNumber:= wError ); 				// Set Ink Input Feedback Error for AppServer to process. 
					bRESET[Index] := TRUE;										//reset this error indication for next fountain
					GVL.mb_Output_Coils[GVL.PLCerrorLastRequestInk+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;		// set bool to show AS error condition
					GVL_IO.InkMotorFwd[Index] := FALSE;							//reset BOTH direction outputs, no move if error
					GVL_IO.InkMotorRvs[Index] := FALSE;
					GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE; 
					GVL.w_LastSweepTrim[Index] := w_target[Index];						// last trim is now requested target trim
					IF GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.AUTO_FUNCTION THEN
						GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION; //force into MANUAL function					
					END_IF
				ELSE
					bRESET[Index] := FALSE;													//no error, reset error indication for next fountain anyway
				END_IF	
				GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;	//not running now
//			ELSE				//if ftn disabled with OFF function
//				GVL_IO.InkMotorFwd[Index] := FALSE;							//reset BOTH direction outputs, not moving if function is OFF
//				GVL_IO.InkMotorRvs[Index] := FALSE;
//				GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE; 
//			END_IF   // test disable inker sweep
		ELSE				//if ftn not enabled
			GVL_IO.InkMotorFwd[Index] := FALSE;							//reset BOTH direction outputs, not moving if not enabled
			GVL_IO.InkMotorRvs[Index] := FALSE;
			GVL.mb_Output_Coils[GVL.Inker_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE; 
		END_IF 	
	END_FOR 	//normal operations - loop all fountains here
END_IF		//not initializing PLC test
//----------- end of InkSweep_FB.POU ---------------------------------	]]></ST>
    </Implementation>
    <LineIds Name="FBInkSweep_FB">
      <LineId Id="3" Count="26" />
      <LineId Id="31" Count="25" />
      <LineId Id="611" Count="1" />
      <LineId Id="614" Count="1" />
      <LineId Id="613" Count="0" />
      <LineId Id="57" Count="23" />
      <LineId Id="545" Count="1" />
      <LineId Id="206" Count="0" />
      <LineId Id="287" Count="1" />
      <LineId Id="285" Count="0" />
      <LineId Id="84" Count="5" />
      <LineId Id="96" Count="22" />
      <LineId Id="481" Count="1" />
      <LineId Id="354" Count="0" />
      <LineId Id="357" Count="0" />
      <LineId Id="483" Count="0" />
      <LineId Id="356" Count="0" />
      <LineId Id="350" Count="0" />
      <LineId Id="353" Count="0" />
      <LineId Id="352" Count="0" />
      <LineId Id="120" Count="8" />
      <LineId Id="418" Count="2" />
      <LineId Id="129" Count="7" />
      <LineId Id="2" Count="0" />
      <LineId Id="138" Count="7" />
      <LineId Id="153" Count="18" />
      <LineId Id="547" Count="0" />
      <LineId Id="173" Count="2" />
      <LineId Id="548" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>