<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4022.10">
  <POU Name="FBInkWaterOFF" Id="{9ec61e11-bdbc-418b-9451-b0a21136cd96}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK PUBLIC FBInkWaterOFF
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
///SDOC/////////////////////////////////////////////////////////////////////////
//
//  FBInkWaterOFF.TcPOU      -  - AVT PLC 
//
//  Author:         Gary Stefancik                         Date: Aug 23, 2017
//
//	Beckhoff TC3 Structured Text for CX50x0 PLC
//
//	includes features:
//		10 inker enables
//		Ink ramping
//		Water ramping
//		Ink Surge
//		Water Flood
//		Ink Ducting (Hold Off)
//		Ink Wash Up 
//		Ink Function Control (Off/manual/auto)
//		water Function Control (off/manual/auto)
//		Inker positioner with feedback
//		Water positioner with feedback
//		Inker Analog Control
//		water Analog Control
//		Inker Positioner output cancel
//		Water Positioner output cancel
//		Error logging
//		Analog Calibration - Real-time Support
///////////////////////////////////////////////////////////////////////SDOCEND//
	// === LOCAL DATA === NOT saved over power cycles
	Index						:WORD;						//temp word index for fountain loop
	Index_offset			:WORD;								//index offset to runtime data for fountains 7 to 10; 0 or 220
	w_Inker_OFF_requested	:ARRAY[0..GVL.w_MAXFOUNTAINS] OF WORD;	//temp flag to record change in OFF status and wait until on-press trim is at target, then change the MODE
	w_Water_OFF_requested	:ARRAY[0..GVL.w_MAXFOUNTAINS] OF WORD;	// 0 = not requested, 1 = start request, 2= tracking the sweep trim to OFF setting
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[
// PLC provides the following functionality for the slaves setting and resetting the Ink and Water OFF function, per fountain:
//slave sets GVL.InkSweep_OFF bool to desired state: 
//slave sets GVL.WtrControl_OFF bool to desired state: 
//bool is set to OFF (TRUE) and we don't care what ink/water function value is set to.
//		local b_Inker_OFF_requested is set for a chg to OFF (TRUE)
//		ink / water trim is set to OFF function setting. (normally zero), after save previous value
//		ink ductor is set to OFF function setting (normally zero) after save previous setting
//		set Ink_RUN / Water_RUN bool to let all slaves know trim value should be sync'd
//		wait until on-press value for trim is achived, then  Ink_RUN / Water_RUN bool is cleared
//		Ink / water function is set to OFF function value, after save previous setting
//
//bool is set to restore (FALSE) and ink/water function value was set to OFF
//		ink / water trim is restored to previous setting. 
//		ink ductor is restored to previous setting 
//		set Ink_RUN / Water_RUN bool to let all slaves know trim value should be sync'd
//		wait until on-press value for trim is achived, then  Ink_RUN / Water_RUN bool is cleared
//		Ink / water function is restored to previous function value
//

IF (GVL.mb_Output_Coils[GVL.ENABLEFULLINIT] = FALSE) THEN		//do not process while initializing PLC
													// test all configured fountains
	FOR Index := 0 TO (GVL.w_MAXFOUNTAINS) DO		//normal operations - loop ALL the configured fountains
		//Index := 1;  //debug a single fountain, one at a time, 0 to max-1
		Index_offset := 0;		//ftns 1 to 6, WORDRUNTIME only
		IF( Index > 5 )THEN
			Index_offset := GVL.SWPWTR_7_10_FTN_OFFSET;	//ftns 7 to 10, WORDRUNTIME only
		END_IF	
		IF( GVL.mb_Output_Coils[GVL.ENABLEFOUNTAIN + Index] ) THEN				// check if fountain enabled,
//process if ink function is enabled
// assumptions: slaves control the GVL.InkSweep_OFF flag; 
// IF SET, then PLC saves Ink TRIM and function, sets the OFF ink trim, waits until ONPRESS trim is OFF, sets Function value to OFF
// IF CLEAR; PLC restores the ink trim, wait until trim is restored, sets function to previous.  
			IF (GVL.mb_Output_Coils[GVL.ENABLEINKFUNCTION] = TRUE) THEN		

				//****  if inker is normal and inker OFF requested, set the request flag and process here
  				IF((GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND  
				  (w_Inker_OFF_requested[Index] = 0) AND (GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_FUNCTION))  THEN
						w_Inker_OFF_requested[Index] := 1;  									//requested but not OFF yet, part 1 - starting to achieve OFF settings
				//			3. save the ductor value
						IF (GVL.mb_Output_Coils[GVL.INKWASHUP +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) THEN	//if WASHUP is already turned on, then use it's prev ductor settings
							GVL.w_PreviousDuctorOff[Index] := GVL.w_PreviousDuctorWashUp[Index];
							GVL.w_Ductor_WASHorOFFactive[Index] := 1; 						//WASH was first, use WASHUP prev settings as previous ductor settings
						ELSE
							GVL.w_PreviousDuctorOff[Index] := GVL.mb_Output_Registers[GVL.INKDUCTORVALUE + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)];
							GVL.w_Ductor_WASHorOFFactive[Index] := 2; 						//OFF was first, use OFF mode's previous ductor settings
						END_IF
				//			1. save the current inker trim value
						GVL.w_PreviousInkTrimOff[Index] := GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)];
				//			5. save the inker function
						GVL.w_PreviousInkerFunctionOff[Index] := GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)];
						GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  //temp for part 1 only
				//			4. change the ductor setting to OFF (zero)
						GVL.mb_Output_Registers[GVL.INKDUCTORVALUE + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_DUCTOR_VALUE;
				// cancel ink surge if in progress
						IF (GVL.b_SurgeOn[Index]) THEN
							GVL.mb_Output_Coils[GVL.CANCELINKSURGE + (Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;  // easier to clear in surge handling
						END_IF
				END_IF  //part 1

				// if inker off request bool is TRUE and inker function value is NOT OFF, and request to turn to OFF,  then have PLC do the following: (set trim to OFF position)
				IF((w_Inker_OFF_requested[Index] > 0 ) AND		// part 2 - wait until sweep at OFF 
					(GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_FUNCTION) AND
					(GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE)) THEN				
					
					IF( (GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_TRIM_VALUE+5) AND
						(w_Inker_OFF_requested[Index] = 1 ))THEN							//does current on-press trim NOT equal OFF trim value? and just starting request?
							w_Inker_OFF_requested[Index] := 2;  							//requested and started, part 2, starting to achieve OFF settings  and at zero+5 already
					END_IF  //if ink trim value changes
					IF( (GVL.mb_Output_Registers[GVL.SWEEPTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_TRIM_VALUE+5) AND
						(w_Inker_OFF_requested[Index] = 1 ))THEN							//does current on-press trim NOT equal OFF trim value? and just starting request?
				//			2. drive the inker trim to zero, if FB or timed motor
							GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_TRIM_VALUE+5;	//set trim target to OFF trim value
							GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;					// set to ink trim RUN bool  ***
							w_Inker_OFF_requested[Index] := 2;  							//requested and started, part 2 - starting to achieve OFF settings  						
					END_IF  //if ink trim value changes
					IF( (GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_TRIM_VALUE+5) AND
						(w_Inker_OFF_requested[Index] = 2 ))THEN							//be sure state 2 is seeking OFF TRIM target
				//			2. drive the inker trim to zero, if FB or timed motor
							GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_TRIM_VALUE+5;	//set trim target to OFF trim value
							GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;					// set to ink trim RUN bool  ***
							w_Inker_OFF_requested[Index] := 2;  							//requested and started, part 2 - starting to achieve OFF settings  						
					END_IF  //if ink trim value changes
					IF ((GVL.mb_Output_Registers[GVL.SWEEPTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_TRIM_VALUE+5) AND
									(w_Inker_OFF_requested[Index] = 2)) OR  											//wait until sweep is zero in part 2
						(GVL.mb_Output_Coils[GVL.PLCerrorLastRequestInk+(Index * GVL.BOOLRUNTIMEGROUPSIZE)]) THEN					  //or sweep positioner error
							//end of part 2 - we are done and at OFF position
							GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_TRIM_VALUE;	//set trim target to OFF trim value
							GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;					// set to ink trim RUN bool  ***
							w_Inker_OFF_requested[Index] := 3;	//turn off the part 2 flag
					END_IF

					IF ((GVL.mb_Output_Registers[GVL.SWEEPTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_TRIM_VALUE) AND
									(w_Inker_OFF_requested[Index] = 3)) OR  											//wait until sweep is zero in part 2
						(GVL.mb_Output_Coils[GVL.PLCerrorLastRequestInk+(Index * GVL.BOOLRUNTIMEGROUPSIZE)]) THEN					  //or sweep positioner error
							//end of part 2 - we are done and at OFF position
							GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_FUNCTION;	//now indicate function OFF
							GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;					// clear ink trim RUN bool   ****
							w_Inker_OFF_requested[Index] := 0;	//turn off the part 2 flag
					END_IF

				END_IF	//if setting function to OFF - part 2
				// *****  if inker off bool is now FALSE and ink function value is OFF, then have PLC do the following: (RESTORE from OFF)
				IF((GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE) AND
						(GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_FUNCTION) AND
						(w_Inker_OFF_requested[Index] = 0)) THEN
							GVL.mb_Output_Registers[GVL.SWEEPTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.w_PreviousInkTrimOff[Index];
							GVL.mb_Output_Coils[GVL.InkSweepRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;			//make the inker go back to trim value.   ***
							w_Inker_OFF_requested[Index] := 1; 						 //requested ON but not ON yet, part 1 - starting to achieve ON settings
							GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  //temp for part 1 only
				END_IF  // if ink trim is being restored 
				// if inker off request bool is TRUE and inker function value is NOT OFF, then have PLC do the following: (set trim to prev position)
				IF((w_Inker_OFF_requested[Index] > 0 ) AND	(GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE) AND	// part 2 - wait until sweep at prev position
					(GVL.mb_Output_Registers[GVL.SWEEPTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.w_PreviousInkTrimOff[Index])) THEN
						//			4. change the ductor setting to back to previous
					IF ( GVL.mb_Output_Coils[GVL.INKWASHUP + (Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE ) THEN		//if not WASHUP, restore ductor setting 
						GVL.mb_Output_Registers[GVL.INKDUCTORVALUE + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)]:= GVL.w_PreviousDuctorOFF[Index];	//Restore ductor value from previous
						GVL.w_Ductor_WASHorOFFactive[Index] := 0; 							//neither mode is active now
					END_IF
					//end of part 2 - we are done and at OFF position
					GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.w_PreviousInkerFunctionOff[Index];	//now indicate function is back to prev
					GVL.mb_Output_Coils[GVL.InkSweep_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
					w_Inker_OFF_requested[Index] := 0;	//turn off the part 2 flag
				END_IF
				//****  if inker is OFF and inker OFF ONLY requested, set the request flag and process here
  				IF((GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND (GVL.mb_Output_Coils[GVL.InkSweep_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND  
				   (GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_FUNCTION))  THEN
						w_Inker_OFF_requested[Index] := 0;  									//requested to clear OFF only - OFF settings cleared
				//			3. restore the ductor value
						IF ( GVL.mb_Output_Coils[GVL.INKWASHUP + (Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE ) THEN		//if not WASHUP, restore ductor setting 
							GVL.mb_Output_Registers[GVL.INKDUCTORVALUE + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)]:= GVL.w_PreviousDuctorOFF[Index];	//Restore ductor value from previous
							GVL.w_Ductor_WASHorOFFactive[Index] := 0; 							//neither mode is active now
						END_IF
				//			5. set the inker function to MANUAL
						GVL.mb_Output_Registers[GVL.INKFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  
				//			6. clear the BOOLs for OFF mode
						GVL.mb_Output_Coils[GVL.InkSweep_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
						GVL.mb_Output_Coils[GVL.InkSweep_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
				END_IF  //inker OFF only
			END_IF		// if inker function
//*****if water function enabled****
// assumptions: slaves control the GVL.WtrControl_OFF flag; 
// IF SET, then PLC saves Water TRIM and function, sets the OFF water trim, waits until ONPRESS trim is OFF, sets Function value to OFF
// IF CLEAR; PLC restores the water trim, wait until trim is restored, sets function to previous.  
			IF (GVL.mb_Output_Coils[GVL.ENABLEWATERFUNCTION] = TRUE) THEN		//process if water function is enabled
				//*****  if water is normal and water OFF requested, set the request flag and process here
  				IF((GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND  
				  (w_Water_OFF_requested[Index] = 0) AND (GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_FUNCTION))  THEN
						w_Water_OFF_requested[Index] := 1;  									//requested but not OFF yet, part 1 - starting to achieve OFF settings
						//			1. save the current water trim value
						GVL.w_PreviousWaterTrimOff[Index] := GVL.mb_Output_Registers[GVL.WATERTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)];
						//			2. save the water function
						GVL.w_PreviousWaterFunctionOff[Index] := GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)];
						GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  //temp for part 1 only
						GVL.mb_Output_Registers[GVL.WATERTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_TRIM_VALUE;			//set trim target to OFF trim value
				END_IF

				// if water off request bool is TRUE and water function value is NOT OFF, then have PLC do the following: (set trim to OFF position)
				IF((w_Water_OFF_requested[Index] > 0 ) AND		// part 2 - wait until water at OFF 
					(GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_FUNCTION)  AND
					(GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE)) THEN								
					
					IF( (GVL.mb_Output_Registers[GVL.WATERTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_TRIM_VALUE) AND
						(w_Water_OFF_requested[Index] = 1 ))THEN							//does current on-press trim NOT equal OFF trim value? and just starting request?
							w_Water_OFF_requested[Index] := 2;  							//requested and started, part 2, starting to achieve OFF settings  and at zero already
					END_IF  //if ink trim value changes

					IF( (GVL.mb_Output_Registers[GVL.WATERTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] <> GVL.OFF_TRIM_VALUE) AND
						(w_Water_OFF_requested[Index] = 1 ))THEN							//does current on-press trim NOT equal OFF trim value? and just starting request?
							//			2. drive the water trim to zero
							GVL.mb_Output_Registers[GVL.WATERTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_TRIM_VALUE;			//set trim target to OFF trim value
							GVL.mb_Output_Coils[GVL.WtrControlRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;							// set to water trim RUN bool
						//	GVL.mb_Output_Coils[GVL.Water_RUNNING +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;							// set to water trim RUNNING bool
							IF (GVL.b_FloodOn[Index]) THEN
								GVL.mb_Output_Coils[GVL.CANCELWATERFLOOD + (Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;  // easier to clear in flood handling
							END_IF
							w_Water_OFF_requested[Index] := 2;  //requested and started, part 2 - starting to achieve OFF settings
					END_IF  //if water trim value changes
														// cancel  FLOOD if in progress
					IF ((GVL.mb_Output_Registers[GVL.WATERTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_TRIM_VALUE) AND	//water onpress now arrive at OFF position
						(w_Water_OFF_requested[Index] = 2) ) OR  //and wait until water OFF request in part 2
						(GVL.mb_Output_Coils[GVL.PLCerrorLastRequestWtr+(Index * GVL.BOOLRUNTIMEGROUPSIZE)]) THEN		//or water positioner error
							//end of part 2 - we are done and at OFF position
							GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.OFF_FUNCTION;	//now indicate function OFF
							w_Water_OFF_requested[Index] := 0;							//turn off the part 2 flag
					END_IF

				END_IF	//if setting function to OFF - part 2
				//**** if water OFF bool is now FALSE and water function value is OFF, then have PLC do the following: (RESTORE from OFF)
				IF((GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE) AND
						(GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_FUNCTION) AND
						(w_Water_OFF_requested[Index] = 0)) THEN
							GVL.mb_Output_Registers[GVL.WATERTRIM + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.w_PreviousWaterTrimOff[Index];
							GVL.mb_Output_Coils[GVL.WtrControlRUN +(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := TRUE;	//make the water go back to trim value.
							w_Water_OFF_requested[Index] := 1; 						 //requested ON but not ON yet, part 1 - starting to achieve ON settings
							GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  //temp for part 1 only
				END_IF  // if water trim is being restored 
				// if water off request bool is TRUE and water function value is NOT OFF, then have PLC do the following: (set trim to prev position)
				IF((w_Water_OFF_requested[Index] > 0 ) AND	(GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = FALSE) AND	// part 1 - wait until water at prev position
					(GVL.mb_Output_Registers[GVL.WATERTRIMONPRESS + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.w_PreviousWaterTrimOff[Index])) THEN
					//end of part 1- we are done and at OFF position
					GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.w_PreviousWaterFunctionOff[Index];	//now indicate function is back to prev
					GVL.mb_Output_Coils[GVL.WtrControl_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
					w_Water_OFF_requested[Index] := 0;	//turn off the part 1 flag
				END_IF
				//****  if water is OFF and water OFF ONLY requested, set the request flag and process here
  				IF((GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND (GVL.mb_Output_Coils[GVL.WtrControl_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] = TRUE) AND  
				   (GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] = GVL.OFF_FUNCTION))  THEN
						w_Water_OFF_requested[Index] := 0;  									//requested to clear OFF only - OFF settings cleared
				//			5. set the water function to MANUAL
						GVL.mb_Output_Registers[GVL.WATERFUNCTSETTING + Index_offset + (Index * GVL.WORDRUNTIMEGROUPSIZE)] := GVL.MANUAL_FUNCTION;  
				//			6. clear the BOOLs for OFF mode
						GVL.mb_Output_Coils[GVL.WtrControl_OFF+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
						GVL.mb_Output_Coils[GVL.WtrControl_OFF2+(Index * GVL.BOOLRUNTIMEGROUPSIZE)] := FALSE;
				END_IF  //inker OFF only
			END_IF		// if water function
		END_IF 		//if fountain enabled
	END_FOR		//fountain loop
END_IF			//if not initializing
//------------end of InkWaterOFF.POU -------------------	  ]]></ST>
    </Implementation>
    <LineIds Name="FBInkWaterOFF">
      <LineId Id="9" Count="0" />
      <LineId Id="4" Count="0" />
      <LineId Id="528" Count="0" />
      <LineId Id="5" Count="0" />
      <LineId Id="529" Count="0" />
      <LineId Id="6" Count="2" />
      <LineId Id="613" Count="1" />
      <LineId Id="86" Count="0" />
      <LineId Id="10" Count="3" />
      <LineId Id="615" Count="1" />
      <LineId Id="14" Count="8" />
      <LineId Id="279" Count="0" />
      <LineId Id="23" Count="0" />
      <LineId Id="277" Count="0" />
      <LineId Id="276" Count="0" />
      <LineId Id="278" Count="0" />
      <LineId Id="378" Count="3" />
      <LineId Id="426" Count="2" />
      <LineId Id="275" Count="0" />
      <LineId Id="24" Count="2" />
      <LineId Id="622" Count="0" />
      <LineId Id="617" Count="4" />
      <LineId Id="526" Count="0" />
      <LineId Id="27" Count="0" />
      <LineId Id="30" Count="1" />
      <LineId Id="267" Count="0" />
      <LineId Id="218" Count="0" />
      <LineId Id="32" Count="0" />
      <LineId Id="35" Count="1" />
      <LineId Id="41" Count="1" />
      <LineId Id="674" Count="3" />
      <LineId Id="43" Count="1" />
      <LineId Id="286" Count="1" />
      <LineId Id="467" Count="0" />
      <LineId Id="47" Count="1" />
      <LineId Id="721" Count="6" />
      <LineId Id="172" Count="0" />
      <LineId Id="264" Count="1" />
      <LineId Id="521" Count="0" />
      <LineId Id="623" Count="0" />
      <LineId Id="720" Count="0" />
      <LineId Id="624" Count="7" />
      <LineId Id="522" Count="3" />
      <LineId Id="173" Count="1" />
      <LineId Id="52" Count="4" />
      <LineId Id="520" Count="0" />
      <LineId Id="57" Count="4" />
      <LineId Id="280" Count="1" />
      <LineId Id="572" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="573" Count="0" />
      <LineId Id="282" Count="1" />
      <LineId Id="424" Count="1" />
      <LineId Id="423" Count="0" />
      <LineId Id="284" Count="0" />
      <LineId Id="62" Count="1" />
      <LineId Id="568" Count="1" />
      <LineId Id="571" Count="0" />
      <LineId Id="64" Count="0" />
      <LineId Id="128" Count="0" />
      <LineId Id="67" Count="3" />
      <LineId Id="268" Count="0" />
      <LineId Id="75" Count="2" />
      <LineId Id="130" Count="0" />
      <LineId Id="269" Count="0" />
      <LineId Id="271" Count="0" />
      <LineId Id="570" Count="0" />
      <LineId Id="270" Count="0" />
      <LineId Id="285" Count="0" />
      <LineId Id="290" Count="0" />
      <LineId Id="272" Count="0" />
      <LineId Id="78" Count="6" />
      <LineId Id="2" Count="0" />
      <LineId Id="266" Count="0" />
      <LineId Id="92" Count="1" />
      <LineId Id="219" Count="2" />
      <LineId Id="94" Count="5" />
      <LineId Id="139" Count="12" />
      <LineId Id="170" Count="1" />
      <LineId Id="633" Count="1" />
      <LineId Id="678" Count="0" />
      <LineId Id="175" Count="2" />
      <LineId Id="679" Count="0" />
      <LineId Id="179" Count="22" />
      <LineId Id="680" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>